AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to deploy a Node.js app on AWS ECS with EC2 launch type'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC ID
    Default: vpc-0d10393a33604e714

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two subnets in different AZs
    Default: subnet-01d80ff00b2e4cee6,subnet-0e23ea4a450f914b4

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: nodejs-cluster

  # IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: ecsTaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: '*'

  # IAM Role for ECS EC2 Instances
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsInstanceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceRole

  # Security Group for ECS Tasks & EC2 Instances
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic to ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # ECS EC2 Instance
  ECSInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      IamInstanceProfile: !Ref ECSInstanceProfile
      SecurityGroupIds:
        - !Ref ECSSecurityGroup
      SubnetId: !Select [0, !Ref SubnetIds]
      ImageId: ami-0f403e3180720dd7e  # Amazon ECS-Optimized AMI (Check AWS for latest)
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "ECS_CLUSTER=nodejs-cluster" >> /etc/ecs/ecs.config
          systemctl enable --now ecs.service
          yum install -y aws-cli
          echo "ECS agent started."

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: nodejs-task
      RequiresCompatibilities: [EC2]  # EC2 launch type
      Cpu: '256'
      Memory: '512'
      NetworkMode: bridge  # EC2 requires 'bridge' or 'host'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: nodejs-app
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ecs-nodejs-repo:latest"
          Memory: 512
          Cpu: 256
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: nodejs-service
      LaunchType: EC2
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      PlacementConstraints:
        - Type: distinctInstance  # Ensures each task runs on a separate EC2 instance

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster

  ECSInstanceId:
    Description: ECS EC2 Instance ID
    Value: !Ref ECSInstance

  ECSTaskExecutionRole:
    Description: IAM Role for ECS Task Execution
    Value: !GetAtt ECSTaskExecutionRole.Arn